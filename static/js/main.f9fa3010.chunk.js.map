{"version":3,"sources":["BookshelfChanger.js","Book.js","Bookshelf.js","ListBooks.js","SearchBooks.js","BooksAPI.js","App.js","serviceWorker.js","index.js"],"names":["BookshelfChanger","handleChange","event","props","changeShelf","book","target","value","this","books","currentValue","b","id","shelf","className","onChange","disabled","Component","Book","coverImg","imageLinks","thumbnail","title","key","style","width","height","backgroundImage","authors","map","author","index","Bookshelf","onShelf","filter","ListBooks","bookshelves","name","SearchBooks","query","result","error","makeQuery","clearSearch","to","onClick","type","placeholder","default","length","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","update","method","body","JSON","stringify","search","BooksApp","state","BooksAPI","setState","componentDidMount","prevstate","concat","path","render","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f9fa3010.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass BookshelfChanger extends Component {\r\n\t\r\n\thandleChange = (event) => {\r\n\tthis.props.changeShelf (this.props.book, event.target.value)\r\n\t}\r\n      render() {\r\n        const { book, books } = this.props;\r\n\t\tlet currentValue = 'none';\r\n\t\tfor (let b of books) {\r\n\t\t\tif (b.id === book.id) {\r\n\t\t\tcurrentValue = b.shelf;\r\n            }\r\n        }\r\n          return (\r\n            <div className=\"book-shelf-changer\">\r\n              <select value={ currentValue } onChange = {this.handleChange} >\r\n                <option value=\"none\" disabled>\r\n                  Move to...\r\n                </option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Have Read</option>\r\n                <option value=\"none\">None</option>\r\n              </select>\r\n            </div>\r\n          );\r\n      }\r\n}\r\n\r\nexport default BookshelfChanger;","import React, { Component } from 'react';\r\nimport BookshelfChanger from './BookshelfChanger';\r\n\r\nclass Book extends Component {\r\n  render() {\r\n     const { books, book, changeShelf } = this.props;\r\n\t const coverImg = book.imageLinks && book.imageLinks.thumbnail ? book.imageLinks.thumbnail\r\n      : 'icons/book-placeholder.svg' ;\r\n     const title = book.title ? book.title : 'No title available';\r\n\r\n\t   return (\r\n        <li key= { book.id }>\r\n          <div className=\"book\">\r\n            <div className=\"book-top\">\r\n             <div className=\"book-cover\"\r\n               style={{\r\n                 width: 128,\r\n                 height: 193,\r\n                 backgroundImage: `url(${coverImg})`\r\n               }}\r\n              />\r\n               <BookshelfChanger  books={ books } book={ book } changeShelf={ changeShelf} />\r\n            </div>\r\n            <div className=\"book-title\">{ title }</div>\r\n              { book.authors && book.authors.map((author, index) => (\r\n                <div className=\"book-authors\" key={ index }>{ author }</div>\r\n              ))}\r\n          </div>\r\n        </li>\r\n      );\r\n};\r\n}\r\nexport default Book;","import React, { Component } from 'react';\r\nimport Book from './Book';\r\n\r\nclass Bookshelf extends Component {\r\n  render() {\r\n    const { books, shelf, changeShelf } = this.props;\r\n\tconst onShelf = books.filter(book => book.shelf === shelf.value);\r\n      return (\r\n        <ol className=\"books-grid\">\r\n\t\t{onShelf.map((book, index) => (\r\n            <Book\r\n\t\t\tkey = {index}\r\n\t\t\tbook = {book}\r\n\t\t\tbooks={books}\r\n\t\t\tchangeShelf={ changeShelf }\r\n            />\r\n        ))}\r\n\t    </ol>\r\n\t  )\r\n  }\r\n}\r\nexport default Bookshelf;","import React, { Component } from 'react';\r\nimport Bookshelf from './Bookshelf';\r\n\r\nclass ListBooks extends Component {\r\n  render() {\r\n    const { books, bookshelves, changeShelf} = this.props;\r\n  return (\r\n    <div className=\"list-books-content\">\r\n      {bookshelves.map((shelf, index) => {\r\n        return (\r\n          <div className=\"bookshelf\" key={ index }>\r\n            <h2 className=\"bookshelf-title\">{ shelf.name }</h2>\r\n              <div className=\"bookshelf-books\">\r\n                    <Bookshelf\r\n\t\t\t\t\t   shelf={ shelf }\r\n                       books={ books }\r\n\t\t\t\t\t   changeShelf={ changeShelf }\r\n                    />\r\n\t\t\t  </div>\r\n\t\t  </div>\r\n        )\r\n\t  })}\r\n\t</div>\r\n\t)\r\n  }\r\n}\r\n            \r\nexport default ListBooks;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Book from './Book';\r\n\r\nclass SearchBooks extends Component {\r\n  render() {\r\n    const { books, changeShelf, query, result, error, makeQuery, clearSearch  } = this.props;\r\n      return (\r\n        <div className=\"search-books\">\r\n          <div className=\"search-books-bar\">\r\n            <Link className=\"close-search\" to=\"/\" onClick={ clearSearch }>\r\n              Close\r\n            </Link>\r\n             <div className=\"search-books-input-wrapper\">\r\n               <input\r\n                 type=\"text\"\r\n                 placeholder=\"Search by title or author\"\r\n                 value={ query }\r\n                 onChange={ makeQuery }\r\n\t\t\t\t default={ result }\r\n               />\r\n           </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          {result.length > 0 && (\r\n            <div>\r\n              <h3>Search returned { result.length } books </h3>\r\n                <ol className=\"books-grid\">\r\n                  {result.map(book => (\r\n                    <Book\r\n                      book={ book }\r\n                      books={ books }\r\n\t\t\t\t\t  shelf={book.shelf ? book.shelf : 'none'}\r\n                      changeShelf={changeShelf}\r\n                    />\r\n                   ))}\r\n                </ol>\r\n            </div>\r\n          )}\r\n          {error && (\r\n            <h3>Search did not return any books. Please try again!</h3>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBooks;","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport ListBooks from './ListBooks'\r\nimport SearchBooks from './SearchBooks'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport { Route, Link } from 'react-router-dom'\r\n\r\nclass BooksApp extends Component {\r\n  state = {\r\n    books: [],\r\n    result: [],\r\n    error: false\r\n  }\r\n  makeQuery = (event) => {\r\n\tconst query = event.target.value;\r\n    if (query) {\r\n      BooksAPI.search(query).then(books => {\r\n        books.length > 0\r\n          ? this.setState({ result: books, error: false })\r\n          : this.setState({ result: [], error: true });\r\n      });\r\n    }\r\n\telse this.setState({ result: [], error: false })\r\n\t\r\n  }\r\n  clearSearch = () => {\r\n\t  this.setState({result: [], error: false })\r\n  }\r\n  \r\n  bookshelves = [\r\n    { value: 'currentlyReading', name: 'Currently Reading' },\r\n    { value: 'wantToRead', name: 'Want to Read' },\r\n    { value: 'read', name: 'Have Read' },\r\n  ];\r\n  componentDidMount = () => {\r\n    BooksAPI.getAll().then(books => {\r\n      this.setState({ books: books });\r\n    });\r\n  };\r\n  changeShelf = (book, shelf) => {\r\n    BooksAPI.update(book, shelf)\r\n    .then(() => {\r\n      book.shelf = shelf;\r\n      this.setState((prevstate) => ({\r\n        books: prevstate.books.filter((b) => {\r\n          return (b.id !== book.id)\r\n        }).concat([book])\r\n      }))\r\n    })\r\n\t\r\n  }\r\n     render() {\r\n\t   const { books } = this.state;\r\n         return (\r\n           <div className=\"app\">\r\n             <Route path=\"/search\"\r\n               render={() => (\r\n                <SearchBooks books={ books }  changeShelf= { this.changeShelf } query={ this.query } result={ this.state.result } error={ this.state.error } makeQuery={ this.makeQuery } clearSearch={ this.clearSearch }/>\r\n               )}\r\n             />\r\n             <Route exact path=\"/\"\r\n               render={() => (\r\n                 <div className=\"list-books\">\r\n                   <div className=\"list-books-title\">\r\n                     <h1>MyReads</h1>\r\n                   </div>\r\n                     <ListBooks books={ books } bookshelves = { this.bookshelves } changeShelf={ this.changeShelf } />\r\n                   <div className=\"open-search\">\r\n                     <Link to=\"/search\"><button>Add a Book</button></Link>\r\n                   </div>\r\n                 </div>\r\n               )}\r\n             />\r\n           </div>\r\n         )\r\n     }\r\n}\r\n\r\nexport default BooksApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}